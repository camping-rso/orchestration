---
- hosts: all
  tasks:
    - name: Get the resource group name of the AKS cluster
      shell: "az aks show --resource-group {{ resource_group_name }} --name {{ aks_name }} --query nodeResourceGroup -o tsv"
      register: resource_group

    - name: Create a new public IP
      shell: "az network public-ip create --resource-group {{ resource_group.stdout_lines[0] }} --name CampingIP --sku Standard --zone 1 --allocation-method static --query publicIp.ipAddress -o tsv"
      register: public_ip

    - name: Install kubectl
      shell: "az aks install-cli --install-location=./kubectl"

    - name: Connect to cluster using kubectl
      shell: "az aks get-credentials --resource-group {{ resource_group_name }} --name {{ aks_name }}"

    - name: Create Kubernetes secret
      shell: "./kubectl create secret generic camping-overview-ms-secrets --from-literal=db-connection-string='{{ camping_overview_ms_db_connection_string }}'"

    - name: Create Kubernetes secret
      shell: "./kubectl create secret generic camping-reservations-ms-secrets --from-literal=db-connection-string='{{ camping_reservations_ms_db_connection_string }}'"

    - name: Create Kubernetes secret
      shell: "./kubectl create secret generic camping-opinions-ms-secrets --from-literal=db-connection-string='{{ camping_opinions_ms_db_connection_string }}'"

    - name: Create Kubernetes secret
      shell: "./kubectl create secret generic camping-images-ms-secrets --from-literal=postgres-username='{{ camping_images_ms_postgres_credentials.username }}'
                                                                        --from-literal=postgres-password='{{ camping_images_ms_postgres_credentials.password }}'"

    - name: Create Kubernetes secret
      shell: "./kubectl create secret generic camping-catalog-ms-secrets --from-literal=influx-host='{{ camping_catalog_ms_influx_credentials.host }}'
                                                                         --from-literal=influx-port='{{ camping_catalog_ms_influx_credentials.port }}'
                                                                         --from-literal=influx-user='{{ camping_catalog_ms_influx_credentials.user }}'
                                                                         --from-literal=influx-password='{{ camping_catalog_ms_influx_credentials.password }}'
                                                                         --from-literal=influx-database='{{ camping_catalog_ms_influx_credentials.database }}'"

    - name: Create Kubernetes secret
      shell: "./kubectl create secret generic camping-ms-secrets --from-literal=base-url='http://{{ public_ip.stdout_lines[0] }}'"

    - name: Create Kubernetes deployment and service
      shell: "./kubectl apply -f microservices/camping_overview_ms/deployment.yml"

    - name: Create Kubernetes deployment and service
      shell: "./kubectl apply -f microservices/camping_reservations_ms/deployment.yml"

    - name: Create Kubernetes deployment and service
      shell: "./kubectl apply -f microservices/camping_opinions_ms/deployment.yml"

    - name: Create Kubernetes deployment and service
      shell: "./kubectl apply -f microservices/camping_images_ms/deployment.yml"

    - name: Create Kubernetes deployment and service
      shell: "./kubectl apply -f microservices/camping_web_interface/deployment.yml"

    - name: Create a namespace for ingress resources
      shell: "./kubectl create namespace ingress-camping"

    - name: Install helm
      shell: "curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 && chmod 700 get_helm.sh && ./get_helm.sh"

    - name: Add the ingress-nginx repository
      shell: "helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx"
      retries: 3
      delay: 10

    - name: Use Helm to deploy an NGINX ingress controller
      shell: 'helm install nginx-ingress ingress-nginx/ingress-nginx
               --namespace ingress-camping
               --set controller.replicaCount=1
               --set controller.nodeSelector."beta\.kubernetes\.io/os"=linux
               --set defaultBackend.nodeSelector."beta\.kubernetes\.io/os"=linux
               --set controller.service.loadBalancerIP="{{ public_ip.stdout_lines[0] }}"
               --set controller.admissionWebhooks.enabled=false'

    - name: Apply Kubernetes ingress
      shell: "./kubectl apply -f ingress.yml"
      retries: 3
      delay: 10

    - name: Add the datadog repository
      shell: "helm repo add datadog https://helm.datadoghq.com"

    - name: Add the stable repository
      shell: "helm repo add stable https://charts.helm.sh/stable"

    - name: Update helm repos
      shell: "helm repo update"

    - name: Add the stable repository
      shell: "helm install datadog-agent -f datadog-values.yaml --set datadog.site='datadoghq.eu' --set datadog.apiKey={{ datadog_api_key }} datadog/datadog"
...
